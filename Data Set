import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import matplotlib.dates as mdates

# Load the COVID-19 dataset
df = pd.read_csv('time_series_covid19_confirmed_US.csv')

# Extract the date columns (they start from the 12th column onward)
dates = pd.to_datetime(df.columns[11:], format='%m/%d/%y')  # Convert columns to datetime format

# 1. What are the column names of the dataset?
print("Column names:", df.columns)

# 2. What is the structure of the dataset? (data types of each column)
print("\nDataset structure:")
df.info()

# 3. What is the summary statistics of numerical columns?
print("\nSummary statistics:")
print(df.describe())

# 4. How many missing values are in each column?
print("\nMissing values in each column:")
print(df.isnull().sum())

# 5. What are the unique values in the 'Province_State' column?
print("\nUnique values in 'Province_State' column:")
print(df['Province_State'].unique())

# 6. How many records are there in the dataset?
print("\nNumber of records:", len(df))

# 7. What are the first 5 rows of the dataset?
print("\nFirst 5 rows:")
print(df.head())

# 8. What are the last 5 rows of the dataset?
print("\nLast 5 rows:")
print(df.tail())

# 9. What is the range of confirmed cases in the dataset (min and max)?
confirmed_min = df.iloc[:, 11:].min().min()
confirmed_max = df.iloc[:, 11:].max().max()
print("\nRange of confirmed cases:", confirmed_min, confirmed_max)

# 10. What is the average number of confirmed cases per day?
daily_avg_confirmed = df.iloc[:, 11:].mean().mean()
print("\nAverage daily confirmed cases:", daily_avg_confirmed)

# 11. What is the median number of confirmed cases per day?
daily_median_confirmed = df.iloc[:, 11:].median().median()
print("\nMedian daily confirmed cases:", daily_median_confirmed)

# 12. What is the variance of confirmed cases over time?
daily_var_confirmed = df.iloc[:, 11:].var().var()
print("\nVariance of daily confirmed cases:", daily_var_confirmed)

# 13. What is the standard deviation of confirmed cases over time?
daily_std_confirmed = df.iloc[:, 11:].std().std()
print("\nStandard deviation of daily confirmed cases:", daily_std_confirmed)

# 14. What is the total sum of confirmed cases across all dates?
total_confirmed = df.iloc[:, 11:].sum().sum()
print("\nTotal confirmed cases:", total_confirmed)

# 15. How many unique counties are there in the dataset?
print("\nNumber of unique counties:", df['Admin2'].nunique())

# 16. Which state has the highest total confirmed cases?
state_max_confirmed = df.groupby('Province_State').sum().iloc[:, 10:].sum(axis=1).idxmax()
print("\nState with highest total confirmed cases:", state_max_confirmed)

# 17. Which state has the lowest total confirmed cases?
state_min_confirmed = df.groupby('Province_State').sum().iloc[:, 10:].sum(axis=1).idxmin()
print("\nState with lowest total confirmed cases:", state_min_confirmed)

# 18. What date has the highest confirmed cases across all counties?
date_max_cases = df.iloc[:, 11:].sum().idxmax()
print("\nDate with highest confirmed cases:", date_max_cases)

# 19. What date has the lowest confirmed cases across all counties?
date_min_cases = df.iloc[:, 11:].sum().idxmin()
print("\nDate with lowest confirmed cases:", date_min_cases)

# 20. What is the correlation between population (FIPS) and confirmed cases?
print("\nCorrelation between 'FIPS' and confirmed cases:", df['FIPS'].corr(df.iloc[:, 11:].sum(axis=1)))

# 21. What is the skewness of the confirmed cases?
print("\nSkewness of confirmed cases:", df.iloc[:, 11:].sum(axis=1).skew())

# 22. What is the kurtosis of confirmed cases?
print("\nKurtosis of confirmed cases:", df.iloc[:, 11:].sum(axis=1).kurtosis())

# 23. What is the difference between the highest and lowest confirmed cases for each record?
df['High_Low_Diff'] = df.iloc[:, 11:].max(axis=1) - df.iloc[:, 11:].min(axis=1)
print("\nFirst 5 High - Low differences in confirmed cases:")
print(df[['Admin2', 'High_Low_Diff']].head())

# 24. What is the average daily confirmed case range (High - Low)?
print("\nAverage daily confirmed case range:", df['High_Low_Diff'].mean())

# 25. How many records have confirmed cases greater than 10,000?
print("\nRecords with confirmed cases > 10,000:", len(df[df.iloc[:, 11:].sum(axis=1) > 10000]))

# 26. How many records have confirmed cases less than 1,000?
print("\nRecords with confirmed cases < 1,000:", len(df[df.iloc[:, 11:].sum(axis=1) < 1000]))

# 27. What is the average percentage increase of confirmed cases per day?
df['Percentage_Change'] = df.iloc[:, 11:].pct_change(axis=1).mean(axis=1)
print("\nAverage daily percentage change of confirmed cases:", df['Percentage_Change'].mean())

# 28. What is the maximum daily percentage increase in confirmed cases?
print("\nMaximum daily percentage increase:", df['Percentage_Change'].max())

# 29. What is the minimum daily percentage increase in confirmed cases?
print("\nMinimum daily percentage increase:", df['Percentage_Change'].min())

# 30. How many records show a decrease in confirmed cases over time?
print("\nRecords with decreasing confirmed cases:", len(df[df['Percentage_Change'] < 0]))

# 31:What is the total number of confirmed cases per month across all states?
monthly_cases = df.groupby('Month').sum().iloc[:, 10:].sum()
print("\nTotal confirmed cases per month:", monthly_cases)

# 32: How does the number of confirmed cases change seasonally?
seasonal_cases = df.groupby('Season').sum().iloc[:, 10:].sum()
print("\nSeasonal confirmed cases:", seasonal_cases)

# 33:Which counties have the highest average daily growth rate in confirmed cases?
df['Daily_Growth'] = df.iloc[:, 11:].pct_change(axis=1).mean(axis=1)
top_counties = df.groupby('Admin2')['Daily_Growth'].mean().nlargest(10)
print("\nTop 10 counties with highest average daily growth rate:", top_counties)

# 34: What is the distribution of confirmed cases across different latitude and longitude ranges?
lat_long_distribution = df.groupby(['Lat', 'Long_']).sum().iloc[:, 10:].sum()
print("\nDistribution of confirmed cases by latitude and longitude:", lat_long_distribution)

# 35: Which states had the fastest increase in confirmed cases during the first month of the pandemic?
first_month_cases = df.iloc[:, 11:41].sum().nlargest(5)
print("\nStates with the fastest increase in confirmed cases during the first month:", first_month_cases)

# 36: What is the trend in confirmed cases over time for the top 5 most affected states?
top_states = df.groupby('Province_State').sum().iloc[:, 10:].sum(axis=1).nlargest(5)
print("\nTop 5 states with the highest confirmed cases:", top_states)

# 37: Which counties had a confirmed case count of over 100,000 by March 2021?
df_march2021 = df[df['3/1/21'] > 100000]
print("\nCounties with confirmed cases over 100,000 by March 2021:", df_march2021['3/1/21'])

# 38: What is the correlation between population density and confirmed cases?
population_cases_corr = df['Population'].corr(df.iloc[:, 11:].sum(axis=1))
print("\nCorrelation between population density and confirmed cases:", population_cases_corr)

# 39: How do confirmed cases correlate with time in each state?
cases_corr = df.iloc[:, 11:].corr().mean().mean()
print("\nCorrelation of confirmed cases over time across all states:", cases_corr)

# 40: What are the top 10 counties with the most confirmed cases on the last day in the dataset?
top_10_counties = df.groupby('Admin2').sum().iloc[:, -1].nlargest(10)
print("\nTop 10 counties with the most confirmed cases:", top_10_counties)

# 41: What is the cumulative number of confirmed cases per region (Midwest, South, etc.)?
df_region = df.groupby('Region').sum().iloc[:, 10:].sum()
print("\nCumulative confirmed cases per region:", df_region)

# 42:  What is the correlation between the latitude and confirmed cases?
lat_cases_corr = df['Lat'].corr(df.iloc[:, 11:].sum(axis=1))
print("\nCorrelation between latitude and confirmed cases:", lat_cases_corr)

# 43:  Which states had the lowest confirmed cases throughout the entire dataset period?
low_states = df.groupby('Province_State').sum().iloc[:, 10:].sum(axis=1).nsmallest(10)
print("\nStates with the lowest confirmed cases:", low_states)

# 44: What is the moving average of confirmed cases in California for a 7-day period?
ca_cases_ma = df[df['Province_State'] == 'California'].iloc[:, 11:].mean().rolling(window=7).mean()
print("\n7-day moving average of confirmed cases in California:", ca_cases_ma)

# 45: What is the weekly percentage change in confirmed cases for New York?
ny_cases = df[df['Province_State'] == 'New York'].iloc[:, 11:].pct_change(axis=1).mean(axis=1).resample('W').mean()
print("\nWeekly percentage change in confirmed cases for New York:", ny_cases)

# 46: What is the rate of confirmed cases in counties with a population under 50,000?
small_counties_cases = df[df['Population'] < 50000].iloc[:, -1]
print("\nConfirmed cases in counties with population under 50,000:", small_counties_cases)

# 47: What is the average number of confirmed cases for each state across all months?
avg_cases_by_state = df.groupby('Province_State').mean().iloc[:, 10:].mean(axis=1)
print("\nAverage confirmed cases per state across all months:", avg_cases_by_state)

#48: Which 10 states experienced the highest peak in daily confirmed cases?
peak_daily_cases = df.iloc[:, 11:].max(axis=1).nlargest(10)
print("\nTop 10 states with the highest peak in daily confirmed cases:", peak_daily_cases)

# 49. What is the relationship between time and confirmed cases in Florida?
fl_cases = df[df['Province_State'] == 'Florida'].iloc[:, 11:].sum()
print("\nConfirmed cases in Florida over time:", fl_cases)

# 50. What is the exponential growth rate of confirmed cases in the first three months of the pandemic?
first_three_months_growth = df.iloc[:, 11:101].sum().pct_change().mean()
print("\nExponential growth rate of confirmed cases in the first three months:", first_three_months_growth)




# --- PLOTS ---

# Plot 1: Line Plot of Total Confirmed COVID-19 Cases Over Time
total_cases_over_time = df.iloc[:, 11:].sum()
plt.figure(figsize=(10, 5))
plt.plot(dates, total_cases_over_time.values)
plt.title('Total Confirmed COVID-19 Cases Over Time')
plt.xlabel('Date')
plt.ylabel('Confirmed Cases')
plt.xticks(rotation=45)
plt.gca().xaxis.set_major_locator(mdates.MonthLocator(interval=2))  # Show ticks every 2 months
plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m'))  # Show Year-Month
plt.tight_layout()
plt.show()
plt.close()

# Plot 2: Bar Plot of Total Confirmed Cases by State
cases_by_state = df.groupby('Province_State').sum().iloc[:, 10:].sum(axis=1)
plt.figure(figsize=(10, 5))
cases_by_state.plot(kind='bar')
plt.title('Total Confirmed Cases by State')
plt.xlabel('State')
plt.ylabel('Total Confirmed Cases')
plt.tight_layout()
plt.show()
plt.close()

# Plot 3: Heatmap of Confirmed Cases by State and Date
state_case_matrix = df.groupby('Province_State').sum().iloc[:, 10:]
plt.figure(figsize=(12, 8))
sns.heatmap(state_case_matrix, cmap='YlOrRd')
plt.title('Heatmap of Confirmed Cases by State and Date')
plt.xlabel('Date')
plt.ylabel('State')
plt.tight_layout()
plt.show()
plt.close()

# Plot 4: Histogram of Daily Percentage Changes in Confirmed Cases
plt.figure(figsize=(8, 5))
plt.hist(df['Percentage_Change'], bins=30, color='blue', edgecolor='black')
plt.title('Distribution of Daily Percentage Change in Confirmed Cases')
plt.xlabel('Percentage Change')
plt.ylabel('Frequency')
plt.tight_layout()
plt.show()
plt.close()

#PLOT 5: Monthly Total Confirmed Cases Across All States (Line Plot):

df['Month'] = pd.to_datetime(df.columns[11:], format='%m/%d/%y').month
monthly_cases = df.groupby('Month').sum().iloc[:, 10:]
monthly_cases.T.plot(figsize=(10, 6))
plt.title('Monthly Total Confirmed Cases Across All States')
plt.xlabel('Date')
plt.ylabel('Total Confirmed Cases')
plt.show()

#Plot 6: Seasonal Trends in Confirmed Cases (Box Plot):
df['Season'] = pd.cut(df['Month'], bins=[1, 3, 6, 9, 12], labels=['Winter', 'Spring', 'Summer', 'Fall'])
sns.boxplot(x='Season', y=df.iloc[:, 11:].sum(), data=df)
plt.title('Seasonal Trends in Confirmed Cases')
plt.show()

#PlOT 7: Counties with the Highest Average Daily Growth Rate (Bar Plot):
df['Daily_Growth'] = df.iloc[:, 11:].pct_change(axis=1).mean(axis=1)
top_counties = df.groupby('Admin2')['Daily_Growth'].mean().nlargest(10)
top_counties.plot(kind='bar', figsize=(10, 6))
plt.title('Counties with Highest Daily Growth Rate')
plt.show()


#plot 8: Counties with the Highest Average Daily Growth Rate (Bar Plot):
df['Daily_Growth'] = df.iloc[:, 11:].pct_change(axis=1).mean(axis=1)
top_counties = df.groupby('Admin2')['Daily_Growth'].mean().nlargest(10)
top_counties.plot(kind='bar', figsize=(10, 6))
plt.title('Counties with Highest Daily Growth Rate')
plt.show()

#PLOT 9: Distribution of Confirmed Cases by Latitude and Longitude (Hexbin Plot):

plt.hexbin(df['Lat'], df['Long_'], gridsize=50, cmap='Greens')
plt.colorbar(label='Total Confirmed Cases')
plt.title('Distribution of Confirmed Cases by Latitude and Longitude')
plt.xlabel('Latitude')
plt.ylabel('Longitude')
plt.show()

#PLOT 10: Fastest Increase in Confirmed Cases in the First Month (Line Plot)
first_month_cases = df.iloc[:, 11:41].sum().nlargest(5)
first_month_cases.T.plot(figsize=(10, 6))
plt.title('Fastest Increase in Confirmed Cases in the First Month')
plt.show()

#PLOT 11: Confirmed Cases Trend for Top 5 States (Line Plot):
top_states = df.groupby('Province_State').sum().iloc[:, 10:].sum(axis=1).nlargest(5)
df_top_states = df[df['Province_State'].isin(top_states.index)]
df_top_states.iloc[:, 11:].T.plot(figsize=(12, 6))
plt.title('Confirmed Cases Over Time for Top 5 States')
plt.show()

#PLOT 12: Counties with Over 100,000 Confirmed Cases by March 2021 (Bar Plot):
df_march2021 = df[df['3/1/21'] > 100000]
df_march2021['3/1/21'].plot(kind='bar', figsize=(10, 6))
plt.title('Counties with Over 100,000 Confirmed Cases by March 2021')
plt.show()


#PLOT 13: Correlation Between Population Density and Confirmed Cases
sns.scatterplot(x=df['Population'], y=df.iloc[:, 11:].sum())
plt.title('Correlation Between Population and Confirmed Cases')
plt.xlabel('Population')
plt.ylabel('Confirmed Cases')
plt.show()


#Plot 14: Correlation of Confirmed Cases Over Time in Each State

cases_corr = df.iloc[:, 11:].corr()
sns.heatmap(cases_corr, cmap='coolwarm')
plt.title('Correlation of Confirmed Cases Over Time')
plt.show()


#Plot 15: Top 10 Counties with the Most Confirmed Cases
top_10_counties = df.groupby('Admin2').sum().iloc[:, -1].nlargest(10)
top_10_counties.plot(kind='bar', figsize=(10, 6))
plt.title('Top 10 Counties with Most Confirmed Cases')
plt.show()

#Plot 16: Cumulative Confirmed Cases per Region
df_region = df.groupby('Region').sum().iloc[:, 10:]
df_region.T.plot(kind='area', stacked=True, figsize=(10, 6))
plt.title('Cumulative Confirmed Cases per Region')
plt.show()


#PLOT 17: Latitude vs Confirmed Cases 
sns.scatterplot(x=df['Lat'], y=df.iloc[:, 11:].sum())
plt.title('Latitude vs Confirmed Cases')
plt.show()


#PLOT 18: States with Lowest Confirmed Cases
low_states = df.groupby('Province_State').sum().iloc[:, 10:].sum(axis=1).nsmallest(10)
low_states.plot(kind='bar', figsize=(10, 6))
plt.title('States with Lowest Confirmed Cases')
plt.show()


#PLOT 19: Moving Average of Confirmed Cases in California

ca_cases = df[df['Province_State'] == 'California'].iloc[:, 11:].mean()
ca_cases_ma = ca_cases.rolling(window=7).mean()
plt.plot(ca_cases_ma)
plt.title('Moving Average of Confirmed Cases in California')
plt.show()




