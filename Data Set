import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import matplotlib.dates as mdates

# Load the COVID-19 dataset
df = pd.read_csv('time_series_covid19_confirmed_US.csv')

# Extract the date columns (they start from the 12th column onward)
dates = pd.to_datetime(df.columns[11:], format='%m/%d/%y')  # Convert columns to datetime format

# 1. What are the column names of the dataset?
print("Column names:", df.columns)

# 2. What is the structure of the dataset? (data types of each column)
print("\nDataset structure:")
df.info()

# 3. What is the summary statistics of numerical columns?
print("\nSummary statistics:")
print(df.describe())

# 4. How many missing values are in each column?
print("\nMissing values in each column:")
print(df.isnull().sum())

# 5. What are the unique values in the 'Province_State' column?
print("\nUnique values in 'Province_State' column:")
print(df['Province_State'].unique())

# 6. How many records are there in the dataset?
print("\nNumber of records:", len(df))

# 7. What are the first 5 rows of the dataset?
print("\nFirst 5 rows:")
print(df.head())

# 8. What are the last 5 rows of the dataset?
print("\nLast 5 rows:")
print(df.tail())

# 9. What is the range of confirmed cases in the dataset (min and max)?
confirmed_min = df.iloc[:, 11:].min().min()
confirmed_max = df.iloc[:, 11:].max().max()
print("\nRange of confirmed cases:", confirmed_min, confirmed_max)

# 10. What is the average number of confirmed cases per day?
daily_avg_confirmed = df.iloc[:, 11:].mean().mean()
print("\nAverage daily confirmed cases:", daily_avg_confirmed)

# 11. What is the median number of confirmed cases per day?
daily_median_confirmed = df.iloc[:, 11:].median().median()
print("\nMedian daily confirmed cases:", daily_median_confirmed)

# 12. What is the variance of confirmed cases over time?
daily_var_confirmed = df.iloc[:, 11:].var().var()
print("\nVariance of daily confirmed cases:", daily_var_confirmed)

# 13. What is the standard deviation of confirmed cases over time?
daily_std_confirmed = df.iloc[:, 11:].std().std()
print("\nStandard deviation of daily confirmed cases:", daily_std_confirmed)

# 14. What is the total sum of confirmed cases across all dates?
total_confirmed = df.iloc[:, 11:].sum().sum()
print("\nTotal confirmed cases:", total_confirmed)

# 15. How many unique counties are there in the dataset?
print("\nNumber of unique counties:", df['Admin2'].nunique())

# 16. Which state has the highest total confirmed cases?
state_max_confirmed = df.groupby('Province_State').sum().iloc[:, 10:].sum(axis=1).idxmax()
print("\nState with highest total confirmed cases:", state_max_confirmed)

# 17. Which state has the lowest total confirmed cases?
state_min_confirmed = df.groupby('Province_State').sum().iloc[:, 10:].sum(axis=1).idxmin()
print("\nState with lowest total confirmed cases:", state_min_confirmed)

# 18. What date has the highest confirmed cases across all counties?
date_max_cases = df.iloc[:, 11:].sum().idxmax()
print("\nDate with highest confirmed cases:", date_max_cases)

# 19. What date has the lowest confirmed cases across all counties?
date_min_cases = df.iloc[:, 11:].sum().idxmin()
print("\nDate with lowest confirmed cases:", date_min_cases)

# 20. What is the correlation between population (FIPS) and confirmed cases?
print("\nCorrelation between 'FIPS' and confirmed cases:", df['FIPS'].corr(df.iloc[:, 11:].sum(axis=1)))

# 21. What is the skewness of the confirmed cases?
print("\nSkewness of confirmed cases:", df.iloc[:, 11:].sum(axis=1).skew())

# 22. What is the kurtosis of confirmed cases?
print("\nKurtosis of confirmed cases:", df.iloc[:, 11:].sum(axis=1).kurtosis())

# 23. What is the difference between the highest and lowest confirmed cases for each record?
df['High_Low_Diff'] = df.iloc[:, 11:].max(axis=1) - df.iloc[:, 11:].min(axis=1)
print("\nFirst 5 High - Low differences in confirmed cases:")
print(df[['Admin2', 'High_Low_Diff']].head())

# 24. What is the average daily confirmed case range (High - Low)?
print("\nAverage daily confirmed case range:", df['High_Low_Diff'].mean())

# 25. How many records have confirmed cases greater than 10,000?
print("\nRecords with confirmed cases > 10,000:", len(df[df.iloc[:, 11:].sum(axis=1) > 10000]))

# 26. How many records have confirmed cases less than 1,000?
print("\nRecords with confirmed cases < 1,000:", len(df[df.iloc[:, 11:].sum(axis=1) < 1000]))

# 27. What is the average percentage increase of confirmed cases per day?
df['Percentage_Change'] = df.iloc[:, 11:].pct_change(axis=1).mean(axis=1)
print("\nAverage daily percentage change of confirmed cases:", df['Percentage_Change'].mean())

# 28. What is the maximum daily percentage increase in confirmed cases?
print("\nMaximum daily percentage increase:", df['Percentage_Change'].max())

# 29. What is the minimum daily percentage increase in confirmed cases?
print("\nMinimum daily percentage increase:", df['Percentage_Change'].min())

# 30. How many records show a decrease in confirmed cases over time?
print("\nRecords with decreasing confirmed cases:", len(df[df['Percentage_Change'] < 0]))

# --- PLOTS ---

# Plot 1: Line Plot of Total Confirmed COVID-19 Cases Over Time
total_cases_over_time = df.iloc[:, 11:].sum()
plt.figure(figsize=(10, 5))
plt.plot(dates, total_cases_over_time.values)
plt.title('Total Confirmed COVID-19 Cases Over Time')
plt.xlabel('Date')
plt.ylabel('Confirmed Cases')
plt.xticks(rotation=45)
plt.gca().xaxis.set_major_locator(mdates.MonthLocator(interval=2))  # Show ticks every 2 months
plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m'))  # Show Year-Month
plt.tight_layout()
plt.show()
plt.close()

# Plot 2: Bar Plot of Total Confirmed Cases by State
cases_by_state = df.groupby('Province_State').sum().iloc[:, 10:].sum(axis=1)
plt.figure(figsize=(10, 5))
cases_by_state.plot(kind='bar')
plt.title('Total Confirmed Cases by State')
plt.xlabel('State')
plt.ylabel('Total Confirmed Cases')
plt.tight_layout()
plt.show()
plt.close()

# Plot 3: Heatmap of Confirmed Cases by State and Date
state_case_matrix = df.groupby('Province_State').sum().iloc[:, 10:]
plt.figure(figsize=(12, 8))
sns.heatmap(state_case_matrix, cmap='YlOrRd')
plt.title('Heatmap of Confirmed Cases by State and Date')
plt.xlabel('Date')
plt.ylabel('State')
plt.tight_layout()
plt.show()
plt.close()

# Plot 4: Histogram of Daily Percentage Changes in Confirmed Cases
plt.figure(figsize=(8, 5))
plt.hist(df['Percentage_Change'], bins=30, color='blue', edgecolor='black')
plt.title('Distribution of Daily Percentage Change in Confirmed Cases')
plt.xlabel('Percentage Change')
plt.ylabel('Frequency')
plt.tight_layout()
plt.show()
plt.close()
